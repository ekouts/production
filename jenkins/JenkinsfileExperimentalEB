#!/usr/bin/env groovy

def methods
def machinesList
/* 
 Initialization: checkout the production repository to load the files:
 - "util.groovy" with the functions used in the pipeline scripts
 - "Machines.groovy" with the list and properties of HPC systems
*/
stage('Initialization') {
    node('master') {
        checkout scm
        methods = load("$WORKSPACE/jenkins/util.groovy")
        machinesList = load("$WORKSPACE/jenkins/Machines.groovy")
    }
}

/* 
 Machine Selection: 
 - filters the user defined parameter "machines", accessible though "params.machines"
 - defines the runtime HPC systems of the project "machinesToRun" 
 - defines the configuration of the runtime HPC systems "machinesConfiguration"
*/
def machineConfigurations = []
stage('Machine Selection') {
    node('master') {
        def machinesToRun = machinesList.findAll({methods.machineCheck(params.machines, it.name)})
        println "machinesToRun is $machinesToRun"
        if (!machinesToRun) {
            println "No machines were specified. Aborting...."
            currentBuild.result = "FAILURE"
            return
        }
        println "Selected machines: $params.machines"
        for (system in machinesToRun) {
            machineConfigurations.add(
                [machine:system, architectures: methods.getMachineConfiguration(
                        params.machines, system.name, system.archs as String[])])
        }
    }
}
/* 
 Build Stage: configures parallel builds for the different "machinesToRun"
 - starts a loop over all systems in "machineConfigurations"
  - if the machine has multiple architectures, starts a sub-loop over architectures
  - EASYBUILD_PREFIX is the user defined parameter "eb_prefix" ("params.eb-prefix")
  - EBVERSIONEASYBUILD stores the version of EasyBuild ("params.eb_version")
  - the target CDT version is selected by the user and stored in "params.cdt_version"
*/
def builds = [:]
stage('Build Stage') {
    for (system in machineConfigurations) {
        def machine = system.machine
        def machineName = machine.name
        for (arch in system.architectures) {
            def machineLabel = arch == "" ? machineName : "$machineName-$arch"
            builds[machineLabel] = {
                node(machineName) {
                    checkout scm
                    //def prefix = "\$SCRATCH/$env.JOB_BASE_NAME/$machineLabel"
                    if (machine.unusePath != '') {
                        unusePath = arch == '' ?  "$machine.unusePath" : "$machine.unusePath".replace('ARCH', arch)
                        println("The unuse path is: $unusePath")
                    }
                    else {
                        println("The unuse path is empty")
                    }
                    // Remove "--installpath" option and Matlab
                    sh "sed -e '/MATLAB/d' -e 's/--installpath=.*//' $WORKSPACE/jenkins-builds/$machineLabel > buildlist.txt"

                    def loadeasybuild = arch == "" ?
                        "module load EasyBuild-custom/cscs" :
                        "module load daint-$arch EasyBuild-custom/cscs"

                    def switcheasybuild = 
                        "module switch EasyBuild EasyBuild/$eb_version"

                    def command = arch == "" ? 
                        "srun -u -J $env.JOB_BASE_NAME -t 00:01:00 eb --show-config" :  
                        "srun -u -C $arch -J $env.JOB_BASE_NAME -t 00:01:00 eb CrayGNU-19.10.eb CrayIntel-19.10.eb CrayPGI-19.10.eb --hidden --try-software-version=$params.cdt_version"
                    sh("""#!/bin/bash -l
                        export EASYBUILD_PREFIX="$params.eb_prefix"
                        export EASYBUILD_TMPDIR="\$EASYBUILD_PREFIX/tmp"
                        export EASYBUILD_SOURCEPATH="\$EASYBUILD_PREFIX/sources"
                        export EASYBUILD_BUILDPATH="/tmp/$env.BUILD_TAG"

                        echo "Loading $loadeasybuild"
                        $loadeasybuild

                        eb --show-config

                        echo "Running $command"
                        status=0
                        $command

                        status=\$[status+\$?]
                        if [ -d \$EASYBUILD_TMPDIR ]; then
                         chmod -R o+r \$EASYBUILD_TMPDIR
                         find \$EASYBUILD_TMPDIR -type d -exec chmod o+x '{}' \\;
                        fi
                        exit \$status""")
                }
            }
        }
    }

    try {
        parallel builds
        currentBuild.result = "SUCCESS"
    } catch(err) {
        if (err.toString().contains('exit code 143')) {
            currentBuild.result = "ABORTED"
            println "The Build step was cancelled. Aborting..."
        }
        else if (err.toString().contains('Queue task was cancelled')) {
            currentBuild.result = "ABORTED"
            println "The Queue task was cancelled. Aborting..."
        }
        else {
            currentBuild.result = "FAILURE"
            println "The Build step failed. Exiting..."
        }
    }
}
