#!/usr/bin/env groovy

def methods
def machinesList
def loginBash = '#!/bin/bash -l'
stage('Initialization') {
    node('master') {
        checkout scm
        methods = load("$WORKSPACE/jenkins/util.groovy")
        machinesList = load("$WORKSPACE/jenkins/Machines.groovy")
    }
}

def customMachines = params.machines
def machineConfigurations = []
stage('Machine Selection') {
    node('master') {
        def machinesToRun = machinesList.findAll({methods.machineCheck(customMachines, it.name)})
        println "machinesToRun is $machinesToRun"
        if (!machinesToRun) {
            println "No machines were specified. Aborting...."
            currentBuild.result = "FAILURE"
            return
        }
        println "Selected machines: $customMachines"
        for (system in machinesToRun) {
            machineConfigurations.add(
                [machine:system, architectures: methods.getMachineConfiguration(
                        customMachines, system.name, system.archs as String[])])
        }
    }
}

def builds = [:]
stage('Build Stage') {
    for (system in machineConfigurations) {
        def machine = system.machine
        def architectures = system.architectures
        def cpus = machine.cpus
        def machineName = machine.name
        for (architecture in architectures) {
            def arch = architecture
            def machineLabel = arch == "" ? machineName : "$machineName-$arch"
            def cpusPerTask = arch == "" ? cpus : cpus[arch]
            builds[machineLabel] = {
                node(machineName) {
                    checkout scm
                    def project = env.JOB_BASE_NAME.trim()
//                    def scratch = sh(returnStdout: true,
//                                     script: """$loginBash
//                                               echo \$SCRATCH""").trim()
                    def buildPath = "/tmp/jenscscs/$project-$env.BUILD_ID/"
                    def prefix = "\$SCRATCH/$project/$machineLabel"
                    if (machine.unusePath != '') {
                        unusePath = arch == '' ?  "$machine.unusePath" : "$machine.unusePath".replace('ARCH', arch)
                        println("The unuse path is: $unusePath")
                    }
                    else {
                        println("The unuse path is empty")
                    }
                    // Remove "--installpath" option and Matlab
                    sh "awk '{sub(/--installpath=\\S+/, \"\"); print}' $WORKSPACE/jenkins-builds/$machineLabel | sed -E '/\\bMatlab.*/Id' > buildlist.txt"
                    def listFlag = "--list=buildlist.txt"
                    def command = arch == "" ? "srun -u --ntasks=1 --cpus-per-task=$cpusPerTask --job-name=$project --time=00:01:00 hostname" : "srun -u --constraint=$arch --ntasks=1 --cpus-per-task=$cpusPerTask --job-name=$project --time=00:01:00 hostname"
                    sh("""#!/bin/bash -l
                        status=0
                        if [ -d $prefix ]; then
                            rm -rf $prefix
                        fi
                        echo "Running $command"
                        $command
                        export EASYBUILD_TMPDIR="$prefix/tmp"
                        export EASYBUILD_SOURCEPATH="$prefix/sources"
                        export EASYBUILD_BUILDPATH="$buildPath"
                        echo -e "$prefix \n$EASYBUILD_TMPDIR \n$EASYBUILD_SOURCEPATH \n$EASYBUILD_BUILDPATH"
                        status=\$[status+\$?]
                        if [ -d $EASYBUILD_TMPDIR ]; then
                         chmod -R o+r $EASYBUILD_TMPDIR
                         find $EASYBUILD_TMPDIR -type d -exec chmod o+x '{}' \\;
                        fi
                        exit \$status""")
                }
            }
        }
    }

    try {
        parallel builds
        currentBuild.result = "SUCCESS"
    } catch(err) {
        if (err.toString().contains('exit code 143')) {
            currentBuild.result = "ABORTED"
            println "The Build step was cancelled. Aborting..."
        }
        else if (err.toString().contains('Queue task was cancelled')) {
            currentBuild.result = "ABORTED"
            println "The Queue task was cancelled. Aborting..."
        }
        else {
            currentBuild.result = "FAILURE"
            println "The Build step failed. Exiting..."
        }
    }
}
